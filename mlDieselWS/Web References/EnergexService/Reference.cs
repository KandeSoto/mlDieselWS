//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace mlDieselWS.EnergexService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SP4GLwsSoapBinding", Namespace="http://misc.base.sp4gl.spinvent.com")]
    public partial class SP4GLwsService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback executeProcedureOperationCompleted;
        
        private System.Threading.SendOrPostCallback executeProcedureDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback logonOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SP4GLwsService() {
            this.Url = global::mlDieselWS.Properties.Settings.Default.mlDieselWS_EnergexService_SP4GLwsService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event executeProcedureCompletedEventHandler executeProcedureCompleted;
        
        /// <remarks/>
        public event executeProcedureDeviceCompletedEventHandler executeProcedureDeviceCompleted;
        
        /// <remarks/>
        public event logonCompletedEventHandler logonCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://misc.base.sp4gl.spinvent.com", ResponseNamespace="http://misc.base.sp4gl.spinvent.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("executeProcedureReturn")]
        public string executeProcedure(string username, string password, string parameters) {
            object[] results = this.Invoke("executeProcedure", new object[] {
                        username,
                        password,
                        parameters});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void executeProcedureAsync(string username, string password, string parameters) {
            this.executeProcedureAsync(username, password, parameters, null);
        }
        
        /// <remarks/>
        public void executeProcedureAsync(string username, string password, string parameters, object userState) {
            if ((this.executeProcedureOperationCompleted == null)) {
                this.executeProcedureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnexecuteProcedureOperationCompleted);
            }
            this.InvokeAsync("executeProcedure", new object[] {
                        username,
                        password,
                        parameters}, this.executeProcedureOperationCompleted, userState);
        }
        
        private void OnexecuteProcedureOperationCompleted(object arg) {
            if ((this.executeProcedureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.executeProcedureCompleted(this, new executeProcedureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://misc.base.sp4gl.spinvent.com", ResponseNamespace="http://misc.base.sp4gl.spinvent.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("executeProcedureDeviceReturn")]
        public string executeProcedureDevice(string username, string password, string device, string parameters) {
            object[] results = this.Invoke("executeProcedureDevice", new object[] {
                        username,
                        password,
                        device,
                        parameters});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void executeProcedureDeviceAsync(string username, string password, string device, string parameters) {
            this.executeProcedureDeviceAsync(username, password, device, parameters, null);
        }
        
        /// <remarks/>
        public void executeProcedureDeviceAsync(string username, string password, string device, string parameters, object userState) {
            if ((this.executeProcedureDeviceOperationCompleted == null)) {
                this.executeProcedureDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnexecuteProcedureDeviceOperationCompleted);
            }
            this.InvokeAsync("executeProcedureDevice", new object[] {
                        username,
                        password,
                        device,
                        parameters}, this.executeProcedureDeviceOperationCompleted, userState);
        }
        
        private void OnexecuteProcedureDeviceOperationCompleted(object arg) {
            if ((this.executeProcedureDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.executeProcedureDeviceCompleted(this, new executeProcedureDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://misc.base.sp4gl.spinvent.com", ResponseNamespace="http://misc.base.sp4gl.spinvent.com")]
        [return: System.Xml.Serialization.SoapElementAttribute("logonReturn")]
        public bool logon(string username, string password) {
            object[] results = this.Invoke("logon", new object[] {
                        username,
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void logonAsync(string username, string password) {
            this.logonAsync(username, password, null);
        }
        
        /// <remarks/>
        public void logonAsync(string username, string password, object userState) {
            if ((this.logonOperationCompleted == null)) {
                this.logonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlogonOperationCompleted);
            }
            this.InvokeAsync("logon", new object[] {
                        username,
                        password}, this.logonOperationCompleted, userState);
        }
        
        private void OnlogonOperationCompleted(object arg) {
            if ((this.logonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.logonCompleted(this, new logonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void executeProcedureCompletedEventHandler(object sender, executeProcedureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class executeProcedureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal executeProcedureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void executeProcedureDeviceCompletedEventHandler(object sender, executeProcedureDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class executeProcedureDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal executeProcedureDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void logonCompletedEventHandler(object sender, logonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class logonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal logonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591